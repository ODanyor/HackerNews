{"version":3,"sources":["static/news.svg","utils/selectFields.js","services/hnApi.js","styles/StoryStyles.js","components/Story.js","mappers/mapTime.js","styles/StoriesContainerStyles.js","components/Illustrator.js","containers/StoriesContainer.js","hooks/useInfiniteScroll.js","contstants/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","selectFields","id","by","url","time","title","BaseUrl","newStoriesUrl","storyUrl","StoryWrapper","styled","section","StoryTitle","h1","StoryMeta","div","StoryMetaElement","span","props","color","Story","storyId","useState","story","setStory","useEffect","a","async","axios","get","then","data","result","getStory","data-testedid","href","className","timestamp","seconds","Math","floor","Date","interval","mapTime","GlobalStyle","createGlobalStyle","StoriesContainerWrapper","main","NewsIllustrator","Canvas","src","logo","width","alt","StoriesContainer","count","loading","setLoading","setCount","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","useInfiniteScroll","storyIds","setStoryIds","getStoryids","slice","map","key","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0cf2977c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/news.1dbe4503.svg\";","export const selectFields = ({ id, by, url, time, title } = {}) => ({\n  id,\n  by,\n  url,\n  time,\n  title\n});\n","import axios from \"axios\";\nimport { selectFields } from \"../utils/selectFields\";\n\nexport const BaseUrl = \"https://hacker-news.firebaseio.com/v0/\";\nexport const newStoriesUrl = `${BaseUrl}newstories.json`;\nexport const storyUrl = `${BaseUrl}item/`;\n\nexport const getStoryids = async () => {\n  const result = await axios.get(newStoriesUrl).then(({ data }) => data);\n  return result;\n};\n\nexport const getStory = async storyId => {\n  const result = await axios\n    .get(`${storyUrl + storyId}.json`)\n    .then(({ data }) => data && selectFields(data));\n\n  return result;\n};\n","import styled from \"styled-components\";\n\nexport const StoryWrapper = styled.section`\n  padding-top: 10px;\n  margin-bottom: 20px;\n  border-top: 1px solid #cccccc;\n\n  &:first-of-tipe {\n    border-top: 0;\n  }\n  &:last-of-tipe {\n    margin-bottom: 0;\n    padding-botton: 0;\n  }\n`;\n\nexport const StoryTitle = styled.h1`\n  margin-bottom: 5px;\n  font-size: 18px;\n  line-height: 1.8;\n  text-decoration: none;\n\n  a {\n    color: #2e2e2c;\n    background-color: #f8dc3d;\n    text-decoration: none;\n  }\n`;\n\nexport const StoryMeta = styled.div`\n  font-style: italic;\n\n  > span:not(:first-child):before {\n    content: &#8729;\n    margin: 0 7px;\n  }\n\n  .story__meta-bold {\n    font-weight: bold;\n  }\n`;\n\nexport const StoryMetaElement = styled.span`\n  font-weight: bold;\n  color: ${props => props.color || \"red\"};\n`;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from \"react\";\nimport { getStory } from \"../services/hnApi\";\nimport {\n  StoryWrapper,\n  StoryTitle,\n  StoryMeta,\n  StoryMetaElement\n} from \"../styles/StoryStyles\";\nimport { mapTime } from \"../mappers/mapTime\";\n\nfunction Story({ storyId }) {\n  const [story, setStory] = useState({});\n  useEffect(() => {\n    getStory(storyId).then(data => data && data.url && setStory(data));\n  }, []);\n\n  return story && story.url ? (\n    <StoryWrapper data-testedid=\"story\">\n      <StoryTitle>\n        <a href={`${story.url}`}>{story.title}</a>\n      </StoryTitle>\n      <StoryMeta>\n        <span className=\"story__by\" data-testedid=\"story-by\">\n          <StoryMetaElement color=\"#000\">By: </StoryMetaElement>\n          {story.by}\n        </span>\n        <br />\n        <span className=\"story__time\" data-testedid=\"story-time\">\n          <StoryMetaElement color=\"#000\">Posted: </StoryMetaElement>\n          {mapTime(story.time)}\n        </span>\n      </StoryMeta>\n    </StoryWrapper>\n  ) : null;\n}\n\nexport default Story;\n","export const mapTime = timestamp => {\n  const seconds = Math.floor((new Date() - timestamp * 1000) / 1000);\n\n  let interval = Math.floor(seconds / 31536000);\n\n  if (interval > 1) {\n    return `${interval} years`;\n  }\n  interval = Math.floor(seconds / 2592000);\n\n  if (interval > 1) {\n    return `${interval} months`;\n  }\n  interval = Math.floor(seconds / 86400);\n\n  if (interval > 1) {\n    return `${interval} days`;\n  }\n  interval = Math.floor(seconds / 3600);\n\n  if (interval > 1) {\n    return `${interval} hours`;\n  }\n  interval = Math.floor(seconds / 60);\n\n  if (interval > 1) {\n    return `${interval} minutes`;\n  }\n\n  return `${Math.floor(seconds)} seconds`;\n};\n","import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n\thtml {\n\t\t-webkit-box-sizing: border-box;\n\t\t\t\t\t\tbox-sizing: border-box;\n\t}\n\n\t*, *:before, *after {\n\t\t-webkit-box-sizing: inherit;\n\t\t\t\t\t\tbox-sizing: inherit;\n\t}\n\n\tbody {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tline-height: 1;\n\t\tcolor: #202020;\n\t\tbackground-color: #fafafe;\n\t\tfont-family: Arial, Helvatica, sans-serif;\n\t\tfont-size: 16px;\n\t\tbackground-color: rgb(40, 40, 40);\n\t}\n\n\tul {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n`;\n\nexport const StoriesContainerWrapper = styled.main`\n  max-width: 1200px;\n  padding: 20px 15px;\n  margin: auto;\n  color: #fff;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport logo from \"../static/news.svg\";\n\nexport const NewsIllustrator = () => {\n  const Canvas = styled.div`\n    position: relative;\n    max-width: 550px;\n  `;\n  return (\n    <Canvas>\n      <img src={logo} width=\"100%\" alt=\"news\" />\n    </Canvas>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { getStoryids } from \"../services/hnApi\";\nimport Story from \"../components/Story\";\nimport {\n  GlobalStyle,\n  StoriesContainerWrapper\n} from \"../styles/StoriesContainerStyles\";\nimport { useInfiniteScroll } from \"../hooks/useInfiniteScroll\";\nimport { NewsIllustrator } from \"../components/Illustrator\";\n\nfunction StoriesContainer() {\n  const { count } = useInfiniteScroll();\n  const [storyIds, setStoryIds] = useState([]);\n  useEffect(() => {\n    getStoryids().then(data => data && setStoryIds(data));\n  }, []);\n\n  return (\n    <>\n      <GlobalStyle />\n      <StoriesContainerWrapper data-testedid=\"stories-container\">\n        <h1>Hacker news</h1>\n        <NewsIllustrator />\n        {storyIds.slice(0, count).map(storyId => (\n          <Story key={storyId} storyId={storyId} />\n        ))}\n      </StoriesContainerWrapper>\n    </>\n  );\n}\n\nexport default StoriesContainer;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from \"react\";\nimport { MAX_STORIES, STORY_INCREMENT } from \"../contstants\";\n\nexport const useInfiniteScroll = () => {\n  const [loading, setLoading] = useState(false);\n  const [count, setCount] = useState(STORY_INCREMENT);\n\n  const handleScroll = () => {\n    if (\n      window.innerHeight + document.documentElement.scrollTop !==\n        document.documentElement.offsetHeight ||\n      loading\n    ) {\n      return false;\n    }\n    setLoading(true);\n  };\n\n  useEffect(() => {\n    if (!loading) return;\n    if (count + STORY_INCREMENT >= MAX_STORIES) {\n      setCount(MAX_STORIES);\n    } else {\n      setCount(count + STORY_INCREMENT);\n    }\n    setLoading(false);\n  }, [loading]);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  return { count };\n};\n","export const MAX_STORIES = 500;\nexport const STORY_INCREMENT = 30;\n","import React from \"react\";\nimport \"./App.css\";\nimport StoriesContainer from \"./containers/StoriesContainer\";\n\nfunction App() {\n  return (\n    <div>\n      <StoriesContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}